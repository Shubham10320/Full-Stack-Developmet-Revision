Relationships

Relationship - It's a way two or more people/things/etc are connected to each other.

ecommerce application

dbname = ecomm

1. one to one relationship

**teachers collection**
_id : "x123"//generated by MONGODB
teaching_exp : 3 years,
avg_rating : 4.3,
qualification : "PhD"
user_id : "mnopp01" // 2nd way

**users collection**
_id : "mnopp01"//generated by MONGODB
name,
email,
age,
bloodgroup,
phone_no,
gender
city,
role


1st way - I can put the teacher's _id in the users collection
    OR
2nd way - I can put the user's _id in the teachers collection - correct/better way.



2. one to many relationship 

**posts collection**
_id : "post01"//generated by MONGODB
title,
description,
no_of_likes,
comments : [
    {commentID, no_of_likes},
    {},
    .....
    {} //nth comment
] ----- not a better  way


10 posts/documents

post_no : no_of_comments
1 : 2
2 : 20,
3 : 400,
4 : 0,
5 : 1,
6 : 0,
7 : 10,0000
8 : 1000,
9 : 350,
10 : 20

/posts
const posts = PostModel.find()
res.send(posts)



//Why even two collections? why don't we keep comments in post collection itself?
 ^ hope this makes sense



Better way 


**posts collection**
_id : "post01"//generated by MONGODB
title,
description,
no_of_likes,

**comments collection**
_id : "c01" //generated by MONGODB,
description,
no_of_likes,
post_id : "post01"//2nd way


Two ways of establishing the relationship here 


1st way - put the commentID in the posts collection
        OR
2nd way - put the postID in the comments collection - better way 


to resolve the confusion, take the Independent-Dependent/Parent-Child approach

Independent/Parent - Post,
Dependent/Child - Comment

**Child will always have the ID of the Parent** - answer


3. Many to Many relationship

Best example - stackoverflow



**Questions collection** - can have multiple tags right? - js, node, http,

**Tags collection** - node - one tag can also belong to multiple questions right?


Anyway


Relationship
What?
Theoretically How?


