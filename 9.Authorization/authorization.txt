const express = require("express")
const jwt = require("jsonwebtoken")
const bcrypt = require('bcrypt');
require("dotenv").config()

const {UserModel} = require("./models/User.model")
const {connection} = require("./config/db")

const app = express()
app.use(express.json())


const authentication = (req, res, next) => {
    const token = req.headers.authorization?.split(" ")[1]
    if(!token){
        res.send("Login first")
    }
    else{
        jwt.verify(token, process.env.SECRET_KEY, function(err, decoded){
            if(err){
                res.send("Login first")
            }                 
            else{
                const {userID} = decoded
                req.userID = userID
                next()
            }
        })
    }
}

const authorisation = (permittedRoles) => {
    return async (req, res, next) => {
      const userID = req.userID
      const user = await UserModel.findOne({_id : userID})
      const user_role = user.role 
        if(permittedRoles.includes(user_role)){
            next()
        }
        else{
            res.send("Not authorised")
        }
    }
}


app.get("/", (req, res) => {
    res.send("base API endpoint")
})



app.post("/signup", (req, res) => {
    const {email, password, name, role} = req.body;
    bcrypt.hash(password, 2, async function(err, hash) {
        const new_user = new UserModel({
            email,
            password : hash,
            name,
            role
        })
        await new_user.save()
        res.send("Sign up successfull")
    });
})



app.post("/login", async (req, res) => {
    const {email, password} = req.body;
    const is_user = await UserModel.findOne({email})
    if(is_user){
        const user_password_in_db = is_user.password
        bcrypt.compare(password, user_password_in_db, function(err, result) {
            if(result){
                const token = jwt.sign({userID : is_user._id}, process.env.SECRET_KEY)
                res.send({msg : "Login successfull", token : token})
            }
            else{
                res.send("Login failed")
            }
        });
    }
    else{
        res.send("Sign up first")
    }
})



// Both student and lecturer
app.get("/lectures", authentication, authorisation(["student", "lecturer"]), (req, res) => {
       res.send("lectures")       
})

// Only lecturer
app.get("/ratings", authentication, authorisation(["lecturer"]),(req, res) => {
            res.send("ratings")
})

// only student
app.get("/givefeedback",authentication, authorisation(["student"]), (req, res) => {
            res.send("feedback taken")
})

//only for user's who have logged in
app.get("/stats", authentication, (req, res) => {
    res.send("stats")
})



app.listen(8000, async () => {
    try{
        await connection
        console.log("connected to db successfully")
    }
    catch(err){
        console.log("error while connecting to DB")
        console.log(err)
    }
    console.log("listening on port 8000")
})
